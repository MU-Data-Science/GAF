#!@GUILE@ --no-auto-compile
-*- scheme -*-
!#
;;; Copyright Â© 2016, 2017, 2018, 2019, 2020  Roel Janssen <roel@gnu.org>
;;;
;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU Affero General Public License
;;; as published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Affero General Public License for more details.
;;;
;;; You should have received a copy of the GNU Affero General Public
;;; License along with this program.  If not, see
;;; <http://www.gnu.org/licenses/>.

(use-modules (ice-9 getopt-long)
             (ice-9 threads)
             (ldap authenticate)
             (logger)
             (srfi srfi-1)
             (sxml simple)
             (www base64)
             (www config)
             (www config-reader)
             (www db sessions)
             (www requests)
             (www util))

;; ---------------------------------------------------------------------------
;; COMMAND-LINE PARSING
;; ---------------------------------------------------------------------------
;;
;; The following section handles command-line arguments.
;;

(define program-options
  '((version             (single-char #\v) (value #f))
    (help                (single-char #\h) (value #f))
    (error-log           (single-char #\e) (value #t))
    (debug-log           (single-char #\d) (value #t))
    (configuration-file  (single-char #\f) (value #t))))

(define (show-help)
  (for-each (lambda (line) (display line) (newline))
   '("This is sparqling-genomics."
     "  --help                     -h  Show this message."
     "  --version                  -v  Show versioning information."
     "  --error-log=ARG            -e  Path to the error logfile."
     "  --debug-log=ARG            -d  Path to the debugging logfile."
     "  --configuration-file=ARG   -f  Path to the configuration file."))
  (exit 0))

(define (show-version)
  (display "SPARQLing-genomics @VERSION@")
  (newline)
  (exit 0))

(define %config (getopt-long (command-line) program-options))

(when (assoc-ref %config 'help)    (show-help))
(when (assoc-ref %config 'version) (show-version))

;; Make sure backtraces are wide enough to be useful.
(setenv "COLUMNS" "10000")

(if (assoc-ref %config 'error-log)
    (begin
      (set-default-error-port! (open-file (assoc-ref %config 'error-log) "a"))
      (log-error "sg-web" "Started sg-web.")
      (log-error "sg-web" "---------------"))
    (begin
      (set-default-error-port! (current-error-port))
      (log-error "sg-web" "Errors are logged to stderr.")
      (log-error "sg-web" "Use --error-log to change this behavior.")))

(when (assoc-ref %config 'debug-log)
  (set-default-debug-port! (open-file (assoc-ref %config 'debug-log) "a"))
  (log-debug "sg-web" "Started sg-web.")
  (log-debug "sg-web" "---------------"))

;; ----------------------------------------------------------------------------
;; READ CONFIGURATION FILE
;; ----------------------------------------------------------------------------
;;
;; This code overrides the configuration defaults with the user's preferences.
;;

(let [(config-file (assoc-ref %config 'configuration-file))]
  (if config-file
      (unless (read-configuration-from-file config-file)
        (exit 1))
      (let [(sysconfig-file "@webconfdir@/sg-web.xml")]
        (if (file-exists? sysconfig-file)
            (unless (read-configuration-from-file sysconfig-file)
              (exit 1))
            (begin
              (log-error "sg-web" "Refused to run without a configuration file.")
              (log-error "sg-web" "Use --configuration-file to specify one.")
              (exit 0))))))

(when (and (not (ldap-enabled?))
           (null? (local-users)))
  (log-error "sg-web" "Refused to run without an authentication mechanism.")
  (exit 0))

(set-persist-connection-lock! (make-mutex))

;; ----------------------------------------------------------------------------
;; RANDOM NUMBER GENERATOR
;; ----------------------------------------------------------------------------
;;
;; This code sets up the RNG with a (hopefully) secure enough seed.
;;

(catch #t
  (lambda _
    ;; Seed the random number generator.  We use this to generate session IDs.
    ;; To get a secure seed, we use the system call 'getrandom'.
    (let* ((getrandom (pointer->procedure
                       int
                       (dynamic-func "getrandom" (dynamic-link))
                       (list '* size_t uint32)))
           (random-state (make-bytevector 256))
           (random-state-pointer (bytevector->pointer random-state)))
      (do ((bytes 0 (+ bytes (getrandom
                              (make-pointer
                               (+ bytes
                                  (pointer-address random-state-pointer)))
                              (- 256 bytes) 2))))
          ((= bytes 256))
        #t)
      (set! *random-state* (seed->random-state
                            (base64-encode random-state)))))
  (lambda (key . args)
    ;; If the getrandom syscall is not available, use the default
    ;; 'random-state-from-platform' to seed the pRNG.
    (set! *random-state* (random-state-from-platform))))

(let ((address (inet-ntop (www-listen-address-family)
                          (www-listen-address))))
  (log-debug "sg-web" "SPARQLing-genomics is running at http://~a:~a"
             (if (eq? (www-listen-address-family) AF_INET6)
                 (string-append "[" address "]")
                 address)
             (www-listen-port)))

;; ----------------------------------------------------------------------------
;; RESTORE PREVIOUS SESSIONS
;; ----------------------------------------------------------------------------
;;
;; When restarting this daemon, we don't invalidate previous sessions.  So to
;; make reloading the daemon completely transparent to end-users, we load the
;; established sessions before starting the service.
;;

(load-sessions)

;; ----------------------------------------------------------------------------
;; RUNNER
;; ----------------------------------------------------------------------------
;;
;; This code runs the web server.
;;

(if (fork-on-startup?)
    (let ((pid (primitive-fork)))
      (if (eq? pid 0)
          (start-server request-handler)
          (primitive-exit)))
    (start-server request-handler)))
