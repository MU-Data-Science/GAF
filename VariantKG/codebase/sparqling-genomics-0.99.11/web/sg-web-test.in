#!@GUILE@ --no-auto-compile
-*- scheme -*-
!#
;;; Copyright Â© 2019, 2020  Roel Janssen <roel@gnu.org>
;;;
;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU Affero General Public License
;;; as published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Affero General Public License for more details.
;;;
;;; You should have received a copy of the GNU Affero General Public
;;; License along with this program.  If not, see
;;; <http://www.gnu.org/licenses/>.

(use-modules (srfi srfi-64)
             (ice-9 receive)
             (web client)
             (web response))

;; PARAMETERS AND SETUP
;; ----------------------------------------------------------------------------

(define %arguments (cdr (command-line)))
(define %endpoint (if (null? %arguments)
                      #f
                      (car %arguments)))
(define %token    (if (or (null? %arguments)
                          (null? (cdr %arguments)))
                      #f
                      (cadr %arguments)))

(unless %endpoint
  (format (current-error-port) "Please provide an endpoint.~%Usage:~%")
  (format (current-error-port) "  sg-web-test <endpoint-uri> <token>~%")
  (exit 1))

(unless %token
  (format (current-error-port) "Please provide a token.~%Usage:~%")
  (format (current-error-port) "  sg-web-test <endpoint-uri> <token>~%")
  (exit 1))

(define %default-headers `((Cookie . ,(string-append "SGSession=" %token))
                           (accept . ((application/s-expression)))))

;; CONVENIENCE FUNCTIONS
;; ----------------------------------------------------------------------------

(define-syntax-rule
  (with-test-group name . expr)
  (begin
    (test-begin name)
    expr
    (test-end name)))

(define (test-http-get location)
  (receive (header port)
      (http-get (string-append %endpoint location)
                #:streaming? #t
                #:headers %default-headers)
    (let* ((code (response-code header))
           (body (read port)))
      (test-eq location code 200)
      (test-assert
          (string-append location " (body)")
        (and (list? body)
             (> (length body) 0))))))

;; API TESTS
;; ----------------------------------------------------------------------------

(with-test-group "api-tests"
  (lambda _
    (for-each test-http-get '("/api"
                              "/api/connections"
                              "/api/projects"
                              "/api/queries"))

    (receive (header port)
        (http-get (string-append %endpoint "/api")
                  #:headers `((Cookie . ,(string-append "SGSession=" %token))
                              (accept . ((application/non-existent)))))
      (let ((code (response-code header)))
        (test-eq "Unacceptable format" code 406)))))

;; (with-test-group "deployment-tests"
;;   (lambda _
;;     (let ((page (resolve-module '(www pages dashboard) #f #f #:ensure #f)))
;;       (test-assert "Find Guile modules" page))))
